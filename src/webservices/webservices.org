#+title:Webservices for renarration web application
#+AUTHOR: Raj Manvar
#+DATE: [2016-06-16 Thu]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export

* requirements

+ Requirement is to build web-services for providing user friendly renarrations


* List of APIs used

Following is the list of APIs used for the release.

|----------------------+---------------------+--------------------+-------------------+-----------------------|
| API usage            | URL                 | header             | payload           | result                |
|                      |                     | required           | required          |                       |
|----------------------+---------------------+--------------------+-------------------+-----------------------|
| Phonetic Translation | /phonetic-trans     | 'Content-type':    | 'sentence':       | returns phonetic      |
| of sentence          |                     | 'application/json' | required sentence | translation of        |
| from list            |                     |                    |                   | words in the sentence |
|                      |                     |                    |                   | from the list.        |
|----------------------+---------------------+--------------------+-------------------+-----------------------|
| Phonetic Translation | /phonetic-translive | 'Content-type':    | 'sentence':       | returns phonetic      |
| from web             |                     | 'application/json' | required sentence | translation of words  |
|                      |                     |                    |                   | from the web.         |
|----------------------+---------------------+--------------------+-------------------+-----------------------|
| Language translation | /language-translive | 'Content-type':    | 'sentence':       | returns the language  |
| from web             |                     | 'application/json' | required sentence | translation of the    |
|                      |                     |                    |                   | sentence              |
|----------------------+---------------------+--------------------+-------------------+-----------------------|
|                      |                     |                    |                   |                       |


* Imports

** Imports for Python API
Following imports are used for the flask app.

#+BEGIN_SRC python :tangle ../../code/webservices/app/__init__.py :eval no

from flask import Flask
from flask import request
from flask_cors import CORS

app = Flask(__name__)

CORS(app)


from app import views

#+END_SRC


* APIS

** Introduction

*** List of APIs

Following is the list of the APIs used
+ phonetic-trans
+ phonetic-translive
+ language-translive

*** phonetic API introduction

We use pickle library for fast loading of the dictionary whenever the server
starts for the first time.
The dictionary for the phonetic translation is stored in file word.p from which
the dictionary is loaded in the beginning when server is started.
translate live gets the translation from the web using [[http://www.phonemicchart.com/]] .
The translation from the web is however slow at present and is not used in the
demo, but only in the test cases.

*** language translation API
    + For language translation, API of https://tech.yandex.com is used. 
    + The website provides a free key for making max of 350 requests per day.

** imports

#+BEGIN_SRC python :tangle ../../code/webservices/app/views.py :eval no

from app import app
from flask import request
import requests as req
import bs4
import pickle
from dateutil.parser import parse
from datetime import datetime

#+END_SRC

** setting list and keys

+ Phonetic translation of all the 1000 basic words is stored in word_list.p which
  is loaded
+ The translation key for using language translation is loaded here.

#+BEGIN_SRC python :tangle ../../code/webservices/app/views.py :eval no

word_list = pickle.load( open( "word_list.p", "rb" ) )

translatekey = 'trnsl.1.1.20160620T044235Z.009e3fdaf079e045.51ec20ede6d14038c2cb193de1f8891c28dfc749'

#+END_SRC

** phonetic-trans API

Following is the code for getting the phonetic translation from the list

#+BEGIN_SRC python :tangle ../../code/webservices/app/views.py :eval no

@app.route("/phonetic-trans", methods=['POST'])
def phonetictrans():

    sentence = request.json['sentence']
    words = sentence.split()
    answer = []
    for word in words :

        word = word.lower()
        if word in word_list:
            answer.append(word_list[word])
        else :
            answer.append(word)


    return " ".join(answer)

#+END_SRC

** phonetic-transelive API

Following is the code for getting the phonetic translation from the web .
It gets the html code for the webpage and extracts the phonetic translation
from it.

#+BEGIN_SRC python :tangle ../../code/webservices/app/views.py :eval no


@app.route("/phonetic-translive", methods=['POST'])
def phonetictranslive():

    sentence = request.json['sentence']
    words = sentence.split()
    answer = []
    for word in words :

        word = word.lower()
        res = req.get('http://www.phonemicchart.com/transcribe/?w='+word)
        soup = bs4.BeautifulSoup(res.text)
        ret = soup.center
        if ret:
            answer.append(ret.string)
        else :
            answer.append(word)


    return " ".join(answer)

#+END_SRC

** language-trans

#+BEGIN_SRC python :tangle ../../code/webservices/app/views.py :eval no


@app.route("/language-translive", methods=['POST'])
def languagetranslive():
    try:
        sentence = request.json['sentence']
    except:
        return "sentence parameter not passed"
    try :
        fromlang = request.json['from-language']
    except:
        return "en"
    try :
        tolang = request.json['to-language']
    except:
        return "to language not passed"

        
    res = req.get('https://translate.yandex.net/api/v1.5/tr/translate?key='+translatekey+'&text='+sentence+'&lang='+fromlang+'-'+tolang+'&format=plain&options=0');
    soup = bs4.BeautifulSoup(res.text)
    ret = soup.text
    return ret;

#+END_SRC

** test api

#+BEGIN_SRC python :tangle ../../code/webservices/app/views.py :eval no


@app.route("/test", methods=['GET'])
def test():
    return "some test string"

#+END_SRC



* run

Running the app
** running the app

#+BEGIN_SRC python :tangle ../../code/webservices/run.py :eval no


#!flask/bin/python
from app import app


app.run(debug=True)


#+END_SRC


* Tests

** tests using cURL

+ cURL and postman (Chrome application) have been used for testing the
  webservices.


#+BEGIN_SRC bash :tangle ../../code/webservices/tests/test.sh :eval no

#! tests for the rest APIs 

echo "requesting for phoneticd translation of sentence 'between the world we are stuck and between the school' :"
curl -H "Content-Type: application/json" -X POST -d '{"sentence":"between the world we are stuck and between the school"}' http://localhost:5000/phonetic-trans
echo
echo "response received"

echo "requesting for phoneticd translation of word 'excited' :"
curl -H "Content-Type: application/json" -X POST -d '{"sentence":"excited"}' http://localhost:5000/phonetic-trans
echo 
echo "response received"

echo "requesting for phoneticd translation of word 'anonymous' :"
curl -H "Content-Type: application/json" -X POST -d '{"sentence":"anonymous"}' http://localhost:5000/phonetic-trans
echo 
echo "response received"

#+END_SRC


#+BEGIN_SRC bash :tangle ../../code/webservices/tests/test_live.sh :eval no

#! tests for the rest APIs 

echo "requesting for phoneticd translation of sentence 'between the world we are stuck and between the school' :"
curl -H "Content-Type: application/json" -X POST -d '{"sentence":"between the world we are stuck and between the school"}' http://localhost:5000/phonetic-translive
echo
echo "response received"

echo "requesting for phoneticd translation of word 'excited' :"
curl -H "Content-Type: application/json" -X POST -d '{"sentence":"excited"}' http://localhost:5000/phonetic-translive
echo 
echo "response received"

echo "requesting for phoneticd translation of word 'anonymous' :"
curl -H "Content-Type: application/json" -X POST -d '{"sentence":"anonymous"}' http://localhost:5000/phonetic-translive
echo 
echo "response received"

#+END_SRC



* Dependencies

the depedencies of the web application and virtual enviornment setup can be
done by the following bash commands.

#+BEGIN_SRC bash :tangle ../../code/webservices/setup.sh :eval no

#! bash script for setting up enviornment for flask app


sudo apt-get install python-virtualenv

virtualenv flask

flask/bin/pip install flask

flask/bin/pip install flask-login

flask/bin/pip install requests

flask/bin/pip install requests

flask/bin/pip install bs4

flask/bin/pip install python-dateutil

flask/bin/pip install datetime

flask/bin/pip install -U flask-cors


#+END_SRC


